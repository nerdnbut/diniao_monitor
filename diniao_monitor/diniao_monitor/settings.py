"""
Django settings for diniao_monitor project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from cryptography.fernet import Fernet
from datetime import timedelta

# 生成密钥代码（运行一次后复制密钥）
# key = Fernet.generate_key()
# print(key)
ENCRYPTION_KEY = b'fyVWyg_L95kIV-yWAiNipixAkyHvCFfVtzTrnIMUUUo='  # 替换为生成的密钥

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # 每页显示20条日志
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-tf+52cvg!(+x-*l2*cno@qu2py@$h88zyz=(-a28(l9(&yjx@b"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "User",
    "rest_framework",
    "rest_framework.authtoken",
    "server_management",
    "corsheaders",
    "channels",
    "log_management",
    "alarm_set",
    'django_celery_beat',
    'django_celery_results',
    'file_management',
    'task_management',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# 使用自定义的用户模型
AUTH_USER_MODEL = "User.User"

ROOT_URLCONF = "diniao_monitor.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "diniao_monitor.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# 使用mysql数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'diniao_data',
        'USER': 'root',
        # 'PASSWORD': 'root',
        'PASSWORD': 'zhengke@123',
        'HOST': 'localhost',  # 或者使用 '127.0.0.1'
        'PORT': '3306',  # 默认端口是 3306
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "zh-Hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# 允许跨域请求
ALLOWED_HOSTS = ['localhost', '127.0.0.1']
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',  # 前端服务器地址
]
CORS_ALLOW_CREDENTIALS = True  # 允许携带凭证（如 cookies）

# 使用数据库存储会话
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# 设置会话 Cookie 为 HttpOnly
SESSION_COOKIE_HTTPONLY = False

# 浏览器关闭时会话不自动过期
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# 仅在会话数据更改时保存
SESSION_SAVE_EVERY_REQUEST = False
SESSION_COOKIE_SAMESITE = None  # 允许跨站点请求发送Cookie
SESSION_COOKIE_SECURE = False  # 确保在开发环境中不使用https

# 配置 Channels实现 WebSocket 后端接口
ASGI_APPLICATION = 'diniao_monitor.asgi.application'

# Celery配置
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# CELERY_BROKER_URL = 'memory://'  # 使用内存作为消息队列
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/1'
# CELERY_RESULT_BACKEND = 'django-db'  # 使用 Django 数据库存储任务结果
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/2'
CELERY_TIMEZONE = 'UTC'  # 设置时区

# Celery定时任务的配置
CELERY_BEAT_SCHEDULE = {
    'fetch_server_data_every_30_seconds': {
        'task': 'alarm_set.tasks.fetch_server_data_and_check_alarms',  # 修改为实际路径
        'schedule': timedelta(seconds = 30),  # 每30秒执行一次
    },
}
